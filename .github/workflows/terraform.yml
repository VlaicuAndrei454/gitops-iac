name: "gitops IAC"

on:
  push:
    branches:
      - main
      - stage
    paths:
      - terraform/**
  pull_request:
    branches:
      - main
    paths:
      - terraform/**

env:
#Credentials for AWS and S3 bucket for terraform state
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: "us-east-1"
  EKS_CLUSTER_NAME: "vlc-eks"

jobs:
  terraform:
    name: "Apply Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      
      - name: Setup Terraform with specified version
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.3
      
      - name: Terraform Initialize
        id : init
        run: terraform init -backend-config="bucket=${BUCKET_TF_STATE}"
        
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -input=false -auto-approve -parallelism=1 planfile

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}

      - name: Update kubeconfig
        id: get config
        if: steps.apply.outcome == 'success'
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region ${AWS_REGION}

      - name: Install ingress controller
        if: steps.apply.outcome == 'success' && steps.get config.outcome == 'success'
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/aws/deploy.yaml 

      